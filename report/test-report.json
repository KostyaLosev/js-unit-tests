{
  "stats": {
    "suites": 15,
    "tests": 45,
    "passes": 45,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-17T19:34:53.261Z",
    "end": "2025-04-17T19:34:53.310Z",
    "duration": 49,
    "testsRegistered": 45,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9fc6f77c-d14c-4e12-8f95-57c73e71800f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fa552c18-7fd2-470e-85c8-a229bd0b5426",
          "title": "findMax",
          "fullFile": "D:\\js-unit-tests\\test\\arrayUtils.test.js",
          "file": "\\test\\arrayUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the maximum value in the array",
              "fullTitle": "findMax should return the maximum value in the array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMax([1, 2, 3, 4, 5])).to.equal(5);",
              "err": {},
              "uuid": "bb8178eb-885a-40a6-9906-9ec4edfa6c6c",
              "parentUUID": "fa552c18-7fd2-470e-85c8-a229bd0b5426",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work correctly with negative numbers",
              "fullTitle": "findMax should work correctly with negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMax([-10, -5, -1])).to.equal(-1);",
              "err": {},
              "uuid": "575532d7-007a-48f4-a8af-8f62cc77ca58",
              "parentUUID": "fa552c18-7fd2-470e-85c8-a229bd0b5426",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the argument is not an array",
              "fullTitle": "findMax should throw an error if the argument is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => findMax('123')).to.throw('Input must be an array');",
              "err": {},
              "uuid": "3023dcb9-aa6c-4ad6-8c2d-3c8543fb85b0",
              "parentUUID": "fa552c18-7fd2-470e-85c8-a229bd0b5426",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bb8178eb-885a-40a6-9906-9ec4edfa6c6c",
            "575532d7-007a-48f4-a8af-8f62cc77ca58",
            "3023dcb9-aa6c-4ad6-8c2d-3c8543fb85b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "07695b9f-0b12-4a48-bc4b-a4a136bafd87",
          "title": "findMin",
          "fullFile": "D:\\js-unit-tests\\test\\arrayUtils.test.js",
          "file": "\\test\\arrayUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the minimum value in the array",
              "fullTitle": "findMin should return the minimum value in the array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMin([3, 0, 9, -2])).to.equal(-2);",
              "err": {},
              "uuid": "07abae1d-196b-443b-b5e4-379ab1e8a7c7",
              "parentUUID": "07695b9f-0b12-4a48-bc4b-a4a136bafd87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work correctly with identical values",
              "fullTitle": "findMin should work correctly with identical values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMin([2, 2, 2])).to.equal(2);",
              "err": {},
              "uuid": "bff2fbe7-c57a-4d4c-8fe3-3de3b55aff5f",
              "parentUUID": "07695b9f-0b12-4a48-bc4b-a4a136bafd87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the argument is not an array",
              "fullTitle": "findMin should throw an error if the argument is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => findMin({})).to.throw('Input must be an array');",
              "err": {},
              "uuid": "3f2288c3-0566-42e6-aec2-6cbe2f5e707a",
              "parentUUID": "07695b9f-0b12-4a48-bc4b-a4a136bafd87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07abae1d-196b-443b-b5e4-379ab1e8a7c7",
            "bff2fbe7-c57a-4d4c-8fe3-3de3b55aff5f",
            "3f2288c3-0566-42e6-aec2-6cbe2f5e707a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "206a2a23-6565-463a-841b-24a52c613d31",
          "title": "removeDuplicates",
          "fullFile": "D:\\js-unit-tests\\test\\arrayUtils.test.js",
          "file": "\\test\\arrayUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove duplicates from the array",
              "fullTitle": "removeDuplicates should remove duplicates from the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(removeDuplicates([1, 2, 2, 3, 4, 4])).to.eql([1, 2, 3, 4]);",
              "err": {},
              "uuid": "ec7d3441-9757-493e-a994-ea28ccf178e3",
              "parentUUID": "206a2a23-6565-463a-841b-24a52c613d31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if the input is empty",
              "fullTitle": "removeDuplicates should return an empty array if the input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(removeDuplicates([])).to.eql([]);",
              "err": {},
              "uuid": "f05d6191-758d-4ba0-8477-28df0db29239",
              "parentUUID": "206a2a23-6565-463a-841b-24a52c613d31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the argument is not an array",
              "fullTitle": "removeDuplicates should throw an error if the argument is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => removeDuplicates(null)).to.throw('Input must be an array');",
              "err": {},
              "uuid": "71188b0b-04b6-4571-9b04-aa33406e6142",
              "parentUUID": "206a2a23-6565-463a-841b-24a52c613d31",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec7d3441-9757-493e-a994-ea28ccf178e3",
            "f05d6191-758d-4ba0-8477-28df0db29239",
            "71188b0b-04b6-4571-9b04-aa33406e6142"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b9462e0-7772-44cd-bdc6-07c79615ed33",
          "title": "add",
          "fullFile": "D:\\js-unit-tests\\test\\mathUtils.test.js",
          "file": "\\test\\mathUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should correctly add two numbers",
              "fullTitle": "add should correctly add two numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(2, 3)).to.equal(5);",
              "err": {},
              "uuid": "374648e3-d973-4629-aa33-774ded2d331f",
              "parentUUID": "1b9462e0-7772-44cd-bdc6-07c79615ed33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work correctly with negative numbers",
              "fullTitle": "add should work correctly with negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-2, -4)).to.equal(-6);",
              "err": {},
              "uuid": "1e9d3de9-8652-49c9-855d-dd989b70fc82",
              "parentUUID": "1b9462e0-7772-44cd-bdc6-07c79615ed33",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "374648e3-d973-4629-aa33-774ded2d331f",
            "1e9d3de9-8652-49c9-855d-dd989b70fc82"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2ec669fb-0362-43d7-9a62-3757cde46e0a",
          "title": "subtract",
          "fullFile": "D:\\js-unit-tests\\test\\mathUtils.test.js",
          "file": "\\test\\mathUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should correctly subtract two numbers",
              "fullTitle": "subtract should correctly subtract two numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(10, 4)).to.equal(6);",
              "err": {},
              "uuid": "b3c5d072-018e-41aa-908c-912a8ba26a6a",
              "parentUUID": "2ec669fb-0362-43d7-9a62-3757cde46e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work correctly with negative numbers",
              "fullTitle": "subtract should work correctly with negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(-5, -2)).to.equal(-3);",
              "err": {},
              "uuid": "1790356c-a311-4faf-b26e-39cbee144cde",
              "parentUUID": "2ec669fb-0362-43d7-9a62-3757cde46e0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3c5d072-018e-41aa-908c-912a8ba26a6a",
            "1790356c-a311-4faf-b26e-39cbee144cde"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d4159852-6133-45b5-acab-6d33d50e6961",
          "title": "multiply",
          "fullFile": "D:\\js-unit-tests\\test\\mathUtils.test.js",
          "file": "\\test\\mathUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should correctly multiply two numbers",
              "fullTitle": "multiply should correctly multiply two numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(3, 4)).to.equal(12);",
              "err": {},
              "uuid": "ee5191d3-c240-4075-bc72-3194fe0433e3",
              "parentUUID": "d4159852-6133-45b5-acab-6d33d50e6961",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when multiplying by 0",
              "fullTitle": "multiply should return 0 when multiplying by 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(5, 0)).to.equal(0);",
              "err": {},
              "uuid": "675a0e1f-e3ad-4339-a8ed-6ffc776a8f32",
              "parentUUID": "d4159852-6133-45b5-acab-6d33d50e6961",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee5191d3-c240-4075-bc72-3194fe0433e3",
            "675a0e1f-e3ad-4339-a8ed-6ffc776a8f32"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2971dd9c-46b3-4f89-8328-e521bf439d0f",
          "title": "divide",
          "fullFile": "D:\\js-unit-tests\\test\\mathUtils.test.js",
          "file": "\\test\\mathUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should correctly divide two numbers",
              "fullTitle": "divide should correctly divide two numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 2)).to.equal(5);",
              "err": {},
              "uuid": "a5e1ad5d-55e8-4f16-afe8-162bb3e383fd",
              "parentUUID": "2971dd9c-46b3-4f89-8328-e521bf439d0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with negative numbers",
              "fullTitle": "divide should work with negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(-8, 2)).to.equal(-4);",
              "err": {},
              "uuid": "a8b2aa33-8aac-461e-b408-e5ed1df5090c",
              "parentUUID": "2971dd9c-46b3-4f89-8328-e521bf439d0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when dividing by 0",
              "fullTitle": "divide should throw an error when dividing by 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => divide(10, 0)).to.throw('Cannot divide by zero');",
              "err": {},
              "uuid": "00b45601-d2e0-418a-ad46-510b1141269a",
              "parentUUID": "2971dd9c-46b3-4f89-8328-e521bf439d0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5e1ad5d-55e8-4f16-afe8-162bb3e383fd",
            "a8b2aa33-8aac-461e-b408-e5ed1df5090c",
            "00b45601-d2e0-418a-ad46-510b1141269a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "99a36177-8e70-4db4-82c5-93a72aacbc36",
          "title": "capitalize",
          "fullFile": "D:\\js-unit-tests\\test\\stringUtils.test.js",
          "file": "\\test\\stringUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should capitalize the first letter",
              "fullTitle": "capitalize should capitalize the first letter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('hello')).to.equal('Hello');",
              "err": {},
              "uuid": "e88bd99a-e7fe-4958-968b-978cc2245c00",
              "parentUUID": "99a36177-8e70-4db4-82c5-93a72aacbc36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with a single-character string",
              "fullTitle": "capitalize should work with a single-character string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('h')).to.equal('H');",
              "err": {},
              "uuid": "ff9a85ff-3786-4054-a14c-045509641e46",
              "parentUUID": "99a36177-8e70-4db4-82c5-93a72aacbc36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not a string",
              "fullTitle": "capitalize should throw an error if the input is not a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => capitalize(123)).to.throw('Input must be a string');",
              "err": {},
              "uuid": "f3bf6567-d70a-4179-926c-8bea59bd9efe",
              "parentUUID": "99a36177-8e70-4db4-82c5-93a72aacbc36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e88bd99a-e7fe-4958-968b-978cc2245c00",
            "ff9a85ff-3786-4054-a14c-045509641e46",
            "f3bf6567-d70a-4179-926c-8bea59bd9efe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6cd771c2-54ea-4249-8010-e190b7f3f02d",
          "title": "reverseString",
          "fullFile": "D:\\js-unit-tests\\test\\stringUtils.test.js",
          "file": "\\test\\stringUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should reverse the string",
              "fullTitle": "reverseString should reverse the string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reverseString('abc')).to.equal('cba');",
              "err": {},
              "uuid": "c29dfc01-4e3c-4ea9-bc3c-38abba6207d5",
              "parentUUID": "6cd771c2-54ea-4249-8010-e190b7f3f02d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty string when input is empty",
              "fullTitle": "reverseString should return an empty string when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reverseString('')).to.equal('');",
              "err": {},
              "uuid": "ee3b0387-c103-48ec-9554-344e400eb1b3",
              "parentUUID": "6cd771c2-54ea-4249-8010-e190b7f3f02d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not a string",
              "fullTitle": "reverseString should throw an error if the input is not a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => reverseString(null)).to.throw('Input must be a string');",
              "err": {},
              "uuid": "e2475cd0-674c-4cdc-a98c-dce4ac72c3c0",
              "parentUUID": "6cd771c2-54ea-4249-8010-e190b7f3f02d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c29dfc01-4e3c-4ea9-bc3c-38abba6207d5",
            "ee3b0387-c103-48ec-9554-344e400eb1b3",
            "e2475cd0-674c-4cdc-a98c-dce4ac72c3c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9eae41a0-7726-4d15-af05-666d45dbc99a",
          "title": "isPalindrome",
          "fullFile": "D:\\js-unit-tests\\test\\stringUtils.test.js",
          "file": "\\test\\stringUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for palindromes",
              "fullTitle": "isPalindrome should return true for palindromes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('madam')).to.be.true;",
              "err": {},
              "uuid": "6c6746b6-4bc6-48c0-86fe-bf04e2c632d5",
              "parentUUID": "9eae41a0-7726-4d15-af05-666d45dbc99a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for non-palindromes",
              "fullTitle": "isPalindrome should return false for non-palindromes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('hello')).to.be.false;",
              "err": {},
              "uuid": "47b80e00-4ab9-4cf7-86da-890e08e7a296",
              "parentUUID": "9eae41a0-7726-4d15-af05-666d45dbc99a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should treat an empty string as a palindrome",
              "fullTitle": "isPalindrome should treat an empty string as a palindrome",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('')).to.be.true;",
              "err": {},
              "uuid": "4ba58c37-9655-43ae-9096-27723d656c9a",
              "parentUUID": "9eae41a0-7726-4d15-af05-666d45dbc99a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not a string",
              "fullTitle": "isPalindrome should throw an error if the input is not a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => isPalindrome(12321)).to.throw('Input must be a string');",
              "err": {},
              "uuid": "841adaef-2468-435a-8a86-6e7e0a2e612b",
              "parentUUID": "9eae41a0-7726-4d15-af05-666d45dbc99a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c6746b6-4bc6-48c0-86fe-bf04e2c632d5",
            "47b80e00-4ab9-4cf7-86da-890e08e7a296",
            "4ba58c37-9655-43ae-9096-27723d656c9a",
            "841adaef-2468-435a-8a86-6e7e0a2e612b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "09a4efc0-99e2-434a-8a9c-0e5fe6513bc1",
          "title": "checkStudentKnowledge",
          "fullFile": "D:\\js-unit-tests\\test\\studentKnowlegeCheckerUtils.test.js",
          "file": "\\test\\studentKnowlegeCheckerUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true if all answers are correct",
              "fullTitle": "checkStudentKnowledge should return true if all answers are correct",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const studentAnswers = {\n  question1: 'A',\n  question2: 'B',\n  question3: 'C',\n};\nconst correctAnswers = {\n  question1: 'A',\n  question2: 'B',\n  question3: 'C',\n};\nexpect(checkStudentKnowledge(studentAnswers, correctAnswers)).to.be.true;",
              "err": {},
              "uuid": "305750a3-158e-4bb3-8311-f7f854b70544",
              "parentUUID": "09a4efc0-99e2-434a-8a9c-0e5fe6513bc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if at least one answer is incorrect",
              "fullTitle": "checkStudentKnowledge should return false if at least one answer is incorrect",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const studentAnswers = {\n  question1: 'A',\n  question2: 'B',\n  question3: 'D',\n};\nconst correctAnswers = {\n  question1: 'A',\n  question2: 'B',\n  question3: 'C',\n};\nexpect(checkStudentKnowledge(studentAnswers, correctAnswers)).to.be.false;",
              "err": {},
              "uuid": "69ed6e28-37df-4259-94a4-fd6e23e7d3c6",
              "parentUUID": "09a4efc0-99e2-434a-8a9c-0e5fe6513bc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the number of questions does not match",
              "fullTitle": "checkStudentKnowledge should return false if the number of questions does not match",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const studentAnswers = {\n  question1: 'A',\n  question2: 'B',\n};\nconst correctAnswers = {\n  question1: 'A',\n  question2: 'B',\n  question3: 'C',\n};\nexpect(checkStudentKnowledge(studentAnswers, correctAnswers)).to.be.false;",
              "err": {},
              "uuid": "9fb9e12c-ab86-4ab1-a8b3-1da01e4948ca",
              "parentUUID": "09a4efc0-99e2-434a-8a9c-0e5fe6513bc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the order of questions does not match",
              "fullTitle": "checkStudentKnowledge should return false if the order of questions does not match",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const studentAnswers = {\n  question2: 'B',\n  question1: 'A',\n  question3: 'C',\n};\nconst correctAnswers = {\n  question1: 'A',\n  question2: 'B',\n  question3: 'C',\n};\nexpect(checkStudentKnowledge(studentAnswers, correctAnswers)).to.be.false;",
              "err": {},
              "uuid": "636b8696-b64c-4aec-846f-68433a034924",
              "parentUUID": "09a4efc0-99e2-434a-8a9c-0e5fe6513bc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if student has extra answers",
              "fullTitle": "checkStudentKnowledge should return false if student has extra answers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const studentAnswers = {\n  question1: 'A',\n  question2: 'B',\n  question3: 'C',\n  question4: 'D',\n};\nconst correctAnswers = {\n  question1: 'A',\n  question2: 'B',\n  question3: 'C',\n};\nexpect(checkStudentKnowledge(studentAnswers, correctAnswers)).to.be.false;",
              "err": {},
              "uuid": "05b5c2bb-9eab-48b0-8649-92ba19c6ca99",
              "parentUUID": "09a4efc0-99e2-434a-8a9c-0e5fe6513bc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if both answer objects are empty",
              "fullTitle": "checkStudentKnowledge should return true if both answer objects are empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const studentAnswers = {};\nconst correctAnswers = {};\nexpect(checkStudentKnowledge(studentAnswers, correctAnswers)).to.be.true;",
              "err": {},
              "uuid": "eb9355a2-be87-42fa-a207-4ed7d06a72a2",
              "parentUUID": "09a4efc0-99e2-434a-8a9c-0e5fe6513bc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "305750a3-158e-4bb3-8311-f7f854b70544",
            "69ed6e28-37df-4259-94a4-fd6e23e7d3c6",
            "9fb9e12c-ab86-4ab1-a8b3-1da01e4948ca",
            "636b8696-b64c-4aec-846f-68433a034924",
            "05b5c2bb-9eab-48b0-8649-92ba19c6ca99",
            "eb9355a2-be87-42fa-a207-4ed7d06a72a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "75b13f45-0d8b-4ab9-9228-e79b6737090b",
          "title": "filterUsersByAge",
          "fullFile": "D:\\js-unit-tests\\test\\usersListUtils.test.js",
          "file": "\\test\\usersListUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter users by age range",
              "fullTitle": "filterUsersByAge should filter users by age range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge(users, 20, 30);\nexpect(result).to.have.lengthOf(3);\nexpect(result[0].name).to.equal('Alice');",
              "err": {},
              "uuid": "ec17f0b2-8a0c-44e5-a4e8-142d1b702f18",
              "parentUUID": "75b13f45-0d8b-4ab9-9228-e79b6737090b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no users in the specified age range",
              "fullTitle": "filterUsersByAge should return an empty array if no users in the specified age range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge(users, 40, 50);\nexpect(result).to.have.lengthOf(0);",
              "err": {},
              "uuid": "01199310-28c2-43b5-abc8-afe809db0851",
              "parentUUID": "75b13f45-0d8b-4ab9-9228-e79b6737090b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the argument is not an array",
              "fullTitle": "filterUsersByAge should throw an error if the argument is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => filterUsersByAge('invalid', 20, 30)).to.throw('Users must be an array');",
              "err": {},
              "uuid": "c34b11cf-140f-43b1-ab5f-fc133517d43c",
              "parentUUID": "75b13f45-0d8b-4ab9-9228-e79b6737090b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec17f0b2-8a0c-44e5-a4e8-142d1b702f18",
            "01199310-28c2-43b5-abc8-afe809db0851",
            "c34b11cf-140f-43b1-ab5f-fc133517d43c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "54c68869-bf24-4dd0-94ee-9eb84f3659c5",
          "title": "sortUsersByName",
          "fullFile": "D:\\js-unit-tests\\test\\usersListUtils.test.js",
          "file": "\\test\\usersListUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort users by name alphabetically",
              "fullTitle": "sortUsersByName should sort users by name alphabetically",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = sortUsersByName(users);\nexpect(result[0].name).to.equal('Alice');\nexpect(result[1].name).to.equal('Bob');\nexpect(result[2].name).to.equal('Charlie');\nexpect(result[3].name).to.equal('Dave');",
              "err": {},
              "uuid": "c38a46dc-78e0-47b3-8a0b-b3c8124ff46f",
              "parentUUID": "54c68869-bf24-4dd0-94ee-9eb84f3659c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the argument is not an array",
              "fullTitle": "sortUsersByName should throw an error if the argument is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => sortUsersByName('invalid')).to.throw('Users must be an array');",
              "err": {},
              "uuid": "ec9924af-148e-4da5-b095-b68138c3a110",
              "parentUUID": "54c68869-bf24-4dd0-94ee-9eb84f3659c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c38a46dc-78e0-47b3-8a0b-b3c8124ff46f",
            "ec9924af-148e-4da5-b095-b68138c3a110"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "51ca9fa9-de08-4b7c-acbe-776f0d682326",
          "title": "findUserById",
          "fullFile": "D:\\js-unit-tests\\test\\usersListUtils.test.js",
          "file": "\\test\\usersListUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should find a user by ID",
              "fullTitle": "findUserById should find a user by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = findUserById(users, 2);\nexpect(result).to.deep.equal({ id: 2, name: 'Bob', age: 30, email: 'bob@example.com' });",
              "err": {},
              "uuid": "c70f5849-e0f4-4578-9371-022197327190",
              "parentUUID": "51ca9fa9-de08-4b7c-acbe-776f0d682326",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if a user with the given ID is not found",
              "fullTitle": "findUserById should return null if a user with the given ID is not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = findUserById(users, 99);\nexpect(result).to.be.null;",
              "err": {},
              "uuid": "705669e4-fceb-49df-b447-3fcbc23b3161",
              "parentUUID": "51ca9fa9-de08-4b7c-acbe-776f0d682326",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the argument is not an array",
              "fullTitle": "findUserById should throw an error if the argument is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => findUserById('invalid', 2)).to.throw('Users must be an array');",
              "err": {},
              "uuid": "bb93e37c-fb2b-4e69-b06e-403ac5cd05a6",
              "parentUUID": "51ca9fa9-de08-4b7c-acbe-776f0d682326",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c70f5849-e0f4-4578-9371-022197327190",
            "705669e4-fceb-49df-b447-3fcbc23b3161",
            "bb93e37c-fb2b-4e69-b06e-403ac5cd05a6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ced53f3a-1ff6-4dc5-9650-52e47be7ab04",
          "title": "isEmailTaken",
          "fullFile": "D:\\js-unit-tests\\test\\usersListUtils.test.js",
          "file": "\\test\\usersListUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true if email is already taken",
              "fullTitle": "isEmailTaken should return true if email is already taken",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isEmailTaken(users, 'alice@example.com');\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "51be4699-cf81-4284-9ceb-848d44f02bc1",
              "parentUUID": "ced53f3a-1ff6-4dc5-9650-52e47be7ab04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if email is not taken",
              "fullTitle": "isEmailTaken should return false if email is not taken",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isEmailTaken(users, 'newuser@example.com');\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "0fc9cf9a-8e62-4cdc-bc43-657542f09428",
              "parentUUID": "ced53f3a-1ff6-4dc5-9650-52e47be7ab04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the argument is not an array",
              "fullTitle": "isEmailTaken should throw an error if the argument is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => isEmailTaken('invalid', 'alice@example.com')).to.throw('Users must be an array');",
              "err": {},
              "uuid": "7a6b1e37-575f-4e54-a06d-0e374f3a5112",
              "parentUUID": "ced53f3a-1ff6-4dc5-9650-52e47be7ab04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51be4699-cf81-4284-9ceb-848d44f02bc1",
            "0fc9cf9a-8e62-4cdc-bc43-657542f09428",
            "7a6b1e37-575f-4e54-a06d-0e374f3a5112"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "test-report",
        "quiet": "true"
      },
      "version": "6.2.0"
    }
  }
}